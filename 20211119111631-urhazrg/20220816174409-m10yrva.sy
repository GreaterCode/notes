{
	"ID": "20220816174409-m10yrva",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220816174409-m10yrva",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20220816174445-t5ay3qx\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20240515150103-jesae6b\u0026quot;,\u0026quot;scrollTop\u0026quot;:13726,\u0026quot;focusId\u0026quot;:\u0026quot;20220816184436-qi66y96\u0026quot;,\u0026quot;focusStart\u0026quot;:5,\u0026quot;focusEnd\u0026quot;:5}",
		"title": "便捷操作",
		"type": "doc",
		"updated": "20250207144433"
	},
	"Children": [
		{
			"ID": "20220816174445-t5ay3qx",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220816174445-t5ay3qx",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "k8s 便捷操作",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-oz5y9sv",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220816174445-oz5y9sv",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "1.  常用简化命令",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-irwbrbk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220816174445-irwbrbk",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "alias pod='kubectl get pod -o wide -A'\nalias svc='kubectl get svc -A'\nalias node='kubectl get node -o wide'\nalias kc='kubectl'\n \nfunction pid2pod {\n  local pid=$1\n  if [ -f /proc/${pid}/cgroup ]; then\n    local cid=$(cat /proc/${pid}/cgroup | grep \":memory:\" | awk -F '/' '{print $NF}' | awk -F ':' '{print $NF}')\n    if [ \"${cid}\" != \"\" ]; then\n      ctr -n k8s.io c info ${cid} 2\u003e/dev/null | jq -r '.Labels[\"io.kubernetes.pod.namespace\"]+\" \"+.Labels[\"io.kubernetes.pod.name\"]' 2\u003e/dev/null\n    fi\n  fi\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-j69s2ry",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220816174445-j69s2ry",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "2. etcd 运维操作",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-iwfx8pk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220816174445-iwfx8pk",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# 获取访问etcd需要的证书和秘钥（在UC集群上操作）：\nkubectl get cm k8s-certs -o jsonpath='{.data.ca\\\\.pem}' -n \u003cOC集群控制面namespace\u003e \u003e /tmp/ca.pem\nkubectl get cm k8s-certs -o jsonpath='{.data.kubernetes\\\\.pem}' -n \u003cOC集群控制面namespace\u003e \u003e /tmp/kubernetes.pem\nkubectl get cm k8s-certs -o jsonpath='{.data.kubernetes-key\\\\.pem}' -n \u003cOC集群控制面namespace\u003e \u003e /tmp/kubernetes-key.pem\n \n# 获取etcd指标\ncurl -s -k --cacert /tmp/ca.pem --cert /tmp/kubernetes.pem --key /tmp/kubernetes-key.pem https://\u003cOC集群控制面pod的IP地址\u003e:2379/metrics\n# 获取磁盘相关指标\ncurl -s -k --cacert /tmp/ca.pem --cert /tmp/kubernetes.pem --key /tmp/kubernetes-key.pem https://\u003cOC集群控制面pod的IP地址\u003e:2379/metrics | grep \"etcd_disk_backend_commit\\\\|etcd_disk_wal_fsync\"\n# 获取网络相关指标\ncurl -s -k --cacert /tmp/ca.pem --cert /tmp/kubernetes.pem --key /tmp/kubernetes-key.pem https://\u003cOC集群控制面pod的IP地址\u003e:2379/metrics | grep etcd_network_peer_round_trip\n \n# 直接在oc集群控制节点上执行，查看endpoint状态，谁是leader\ndocker exec -it $(docker ps | grep etcd | awk '{print $1}')  etcdctl --cacert=/etc/kubernetes/keys/ca.pem --cert=/etc/kubernetes/keys/kubernetes.pem --key=/etc/kubernetes/keys/kubernetes-key.pem endpoint status --endpoints=https://overcloud-k8s-master-component-1.overcloud-k8s-master-component.bjpre003.svc.cluster.local:2379,\u003chttps://overcloud-k8s-master-component-2.overcloud-k8s-master-component.bjpre003.svc.cluster.local:2379\u003e,\u003chttps://overcloud-k8s-master-component-0.overcloud-k8s-master-component.bjpre003.svc.cluster.local:2379\u003e | sort\n \n# 需进入etcd容器操作，具体的在uc集群上\nkubectl exec -it -n \u003cns\u003e  overcloud-k8s-master-component-0 -c etcd -- bash\n \n# 使用别名，便于操作\nalias ec='ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/keys/ca.pem --cert=/etc/kubernetes/keys/kubernetes.pem --key=/etc/kubernetes/keys/kubernetes-key.pem'\n \n# 查看endpoint状态，谁是leader\nec endpoint --endpoints=https://overcloud-k8s-master-component-1.overcloud-k8s-master-component.bjpre003.svc.cluster.local:2379,\u003chttps://overcloud-k8s-master-component-2.overcloud-k8s-master-component.bjpre003.svc.cluster.local:2379\u003e,\u003chttps://overcloud-k8s-master-component-0.overcloud-k8s-master-component.bjpre003.svc.cluster.local:2379\u003e status | sort\n \n# 查看所有key\nec get / --prefix --keys-only --command-timeout=30s | grep -v \"^$\"\n# 查看key数量统计\nec get / --prefix --keys-only --command-timeout=30s | grep -v \"^$\" | cut -d/ -f3 | sort | uniq -c | sort -rn\n \n# 查看所有/registry/events开头（即k8s events）的key\nec get /registry/events --prefix --keys-only --command-timeout=30s | grep -v \"^$\"\n \n# 查看指定key的数据，并格式化输出（-w fields）\nec get /registry/events/default/.169ae -w fields\n \n# 查看租期列表\nec lease list\n \n# 查看租期lease详情\nec lease timetolive 3fef7aaab970833d -w fields\n# 遍历所有租期lease\nfor l in $(ec lease list | grep -v found); do echo -n \"$l \"; ec lease timetolive $l -w json; done\n \n# 查看租期lease关联的key\nec lease timetolive 13c77b63768667d7 --keys\n \n# 强制删除所有k8s events的KV\nec del --prefix /registry/events/ --command-timeout=30s\n \n# 查看endpoint状态\nec endpoint status -w json\n \n# mvcc压缩\nec compaction --physical \u003crevision-from-endpoint-status\u003e\n \n# 存储碎片整理\nec defrag\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-noglfup",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220816174445-noglfup",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "3. k8s 常见操作",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-cv6t4ja",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220816174445-cv6t4ja",
				"updated": "20230303132654"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# UC集群上直接kubectl操作OC集群\nkubectl exec -it -n \u003cns\u003e overcloud-k8s-master-component-0 -c oc-k8s-ctl -- kubectl --kubeconfig /etc/kubernetes/config/admin.kubeconfig get node\n \n# UC集群上操作，获取OC集群的kubeconfig文件\nkubectl exec -it -n \u003cns\u003e overcloud-k8s-master-component-0 -c oc-k8s-ctl -- cat /etc/kubernetes/config/admin.kubeconfig\n# 上述kubeconfig文件通过127.0.0.1:6443访问apiserver。\n# 将其拷贝到OC集群任一工作节点上 /root/.kube/config 文件，并修改6443为36443，即可在OC集群该节点上kubectl操作OC集群了。\n \n# 格式化输出所有event\nkubectl get event -A -o json | jq '.items[] | .metadata.creationTimestamp + \" \" + .metadata.namespace + \" \" + .metadata.name'\n# 按创建时间格式化输出所有event\nkubectl get event -A -o json | jq '.items[] | .metadata.creationTimestamp + \" \" + .metadata.namespace + \" \" + .metadata.name' -r | sort -r\n\n# 删除指定节点上的pod\nkubectl get pods -A -o=custom-columns='PODNAME:.metadata.name,NAMESPACE:metadata.namespace,HOSTNETWORK:.spec.hostNetwork,DNSPOLICY:.spec.dnsPolicy,NODE:.spec.nodeName' | awk '$3 == \"true\"' | grep -v \"ClusterFirstWithHost\" | grep vm-gk16-130 | awk '{print \"kubectl delete po -n \",$2,$1}' | bash -x\n\n#清理iptables规则\nfor calico in $(kubectl get pod -n kube-system | grep calico-node | awk '{print $1}');do kubectl exec -it ${calico} -n kube-system -- iptables-legacy -F;done\n\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-pkn2okm",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220816174445-pkn2okm",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "4. 修改 kubelet 的 Pod 数量上线",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-ln779l8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220816174445-ln779l8",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# 命令准备\nalias pod='kubectl get pod -o wide -A'\nalias node='kubectl get node -o wide'\n \n# 检查每个节点的Pod数量上限\nfor n in $(node | sed '1d' | awk '{print $1}'); do echo -en \"$n\\\\t\"; kubectl describe node $n | grep Capacity -A 6 | grep \"Capacity\\\\|pods\" | tr -d '\\\\n'; echo ; done\n \n# 查看每个节点当前Pod数量\nfor n in $(node | sed '1d' | awk '{print $1}'); do echo $n; kubectl describe node $n | grep Pods ; echo; done\n \n# 需要每个节点上执行\n# 修改kubelet的pod数量上限\necho -e \"\\\\nmaxPods: 250\" \u003e\u003e /etc/kubernetes/config/kubelet-config.yaml\n# 重启kubelet使配置生效\nsystemctl restart kubelet\n \n# 【注意：可以不执行】删除Pending的Pod，不再等待，直接触发重新调度\nfor np in $(pod | grep Pending | awk '{print $1\":\"$2}'); do n=$(echo $np | cut -d: -f1); p=$(echo $np | cut -d: -f2); kubectl delete pod -n $n $p; done\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-8ff59nt",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220816174445-8ff59nt",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "5.  日常操作",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-7c6rzk7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220816174445-7c6rzk7",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# 查看Pod中容器Id\nkubectl describe  pods -n product-syszk    sharedts001-0| grep \"container\"\n\n# 根据容器Id或者容器名查看容器详细信息\nctr  -n k8s.io  c info 7fe21c0ae241e3ff21f155ce870f6fc7408246d12aaf87bf1fdb5b368278c41d\n\n#获取特定pod的uid\nkubectl get pods -n \u003cnamespace\u003e \u003cpod-name\u003e -o jsonpath='{.metadata.uid}'\n\n \n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-i5dp3pv",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220816174445-i5dp3pv",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "6. 通过 Pid 获取 Pod 名称",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-j3vqkfz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220816174445-j3vqkfz",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ vim pod_name_info.sh\n\n#!/usr/bin/env bash\n\nCheck_jq() {\n  which jq \u0026\u003e /dev/null\n  if [ $? != 0 ];then\n    echo -e \"\\\\033[32;32m 系统没有安装 jq 命令，请参考下面命令安装！  \\\\033[0m \\\\n\"\n    echo -e \"\\\\033[32;32m Centos 或者 RedHat 请使用命令 yum install jq -y 安装 \\\\033[0m\"\n    echo -e \"\\\\033[32;32m Ubuntu 或者 Debian 请使用命令 apt-get install jq -y 安装 \\\\033[0m\"\n    exit 1\n  fi\n}\n\nPod_name_info() {\n  CID=`cat /proc/${pid}/cgroup | head -1 | awk -F '/' '{print $5}'`\n  CID=$(echo ${CID:0:8})\n  docker inspect $CID | jq '.[0].Config.Labels.\"io.kubernetes.pod.name\"'\n}\n\npid=$1\nCheck_jq\nPod_name_info\n\n# 通过 Pid 获取 Pod 名称\n$ ./pod_name_info.sh Pid\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-1r25v10",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220816174445-1r25v10",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "7. 通过 Pod 名称 获取 Pid",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-7lfknwv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220816174445-7lfknwv",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "$ vim pod_pid_info.sh\n\n#!/usr/bin/env bash\n\nCheck_jq() {\n  which jq \u0026\u003e /dev/null\n  if [ $? != 0 ];then\n    echo -e \"\\\\033[32;32m 系统没有安装 jq 命令，请参考下面命令安装！  \\\\033[0m \\\\n\"\n    echo -e \"\\\\033[32;32m Centos 或者 RedHat 请使用命令 yum install jq -y 安装 \\\\033[0m\"\n    echo -e \"\\\\033[32;32m Ubuntu 或者 Debian 请使用命令 apt-get install jq -y 安装 \\\\033[0m\"\n    exit 1\n  fi\n}\n\nPid_info() {\n  docker_storage_location=`docker info  | grep 'Docker Root Dir' | awk '{print $NF}'`\n\n  for docker_short_id in `docker ps | grep ${pod_name} | grep -v pause | awk '{print $1}'`\n  do\n    docker_long_id=`docker inspect ${docker_short_id} | jq \".[0].Id\" | tr -d '\"'`\n    cat ${docker_storage_location}/containers/${docker_long_id}/config.v2.json | jq \".State.Pid\"\n  done\n}\n\npod_name=$1\nCheck_jq\nPid_info\n\n通过 Pod名称 获取 Pid\n$ ./pod_pid_info.sh Pod名称\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-izv5sew",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220816174445-izv5sew",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "8. veth 设备查看对端",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174445-hh60aup",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "YmFzaA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220816174445-hh60aup",
				"updated": "20220816174445"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "YmFzaA==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\n# 一端\nip netns exec netns1 ethtool -S veth1\nNIC statistics:\n     peer_ifindex: 66\n\n# 在另一端查看\nip netns exec netns2 ip link |grep 66\n\n# 查看网络设备是否可转移,netns-local的值是off，说明可以转移的\nethtool  -k eth0|grep local\nnetns-local: off [fixed]\n\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816174458-5m8x4e9",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220816174458-5m8x4e9",
				"updated": "20220816174532"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "9. containerd 根据 pod 查找 pid",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220816184436-qi66y96",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220816184436-qi66y96",
				"updated": "20240719144751"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "function e() {\n    set -eu\n    ns=${2-\"default\"}\n    pod=`kubectl -n $ns describe pod $1 | grep -A10 \"^Containers:\" | grep -Eo 'docker://.*$' | head -n 1 | sed 's/\u003cspan data-type=\"a\" data-href=\"assets/纯管Cell0及跨两AZ高可用-20240719144751-ky7lct6.md\"\u003e纯管Cell0及跨两AZ高可用.md\u003c/span\u003edocker:\\/\\/\\(.*\\)$/\\1/'`\n    pid=`docker inspect -f {{.State.Pid}} $pod`\n    echo \"entering pod netns for $ns/$1\"\n    cmd=\"nsenter -n --target $pid\"\n    echo $cmd068\n    $cmd\n}\n\n\n# pod2pid\n# 入参： podName NS\nfunction e(){\n    set -eu\n    ns=${2-\"default\"}\n    podID=`kubectl get   pods -n  $ns  $1  -o json |jq  .status.containerStatuses[0].containerID | awk -F '/' '{print $NF}'| awk -F '\"' '{print $1}'`\n    pid=`crictl  inspect $podID | jq .info.pid`\n    echo \"entering pod netns for $ns/$1\"\n    cmd=\"nsenter -n --target $pid\"\n    echo $cmd\n    $cmd\n}\n\n\n# 入参：pid\nfunction pid2pod {\n  local pid=$1\n  if [ -f /proc/${pid}/cgroup ]; then\n    local cid=$(cat /proc/${pid}/cgroup | grep \":memory:\" | awk -F '/' '{print $NF}' | awk -F '-'  '{print $3}'| awk -F '.' '{print $1}')\n    if [ \"${cid}\" != \"\" ]; then\n      ctr -n k8s.io c info ${cid} 2\u003e/dev/null | jq -r '.Labels[\"io.kubernetes.pod.namespace\"]+\" \"+.Labels[\"io.kubernetes.pod.name\"]' 2\u003e/dev/null\n    fi\n  fi\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220816194206-4e4cr8l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220816194206-4e4cr8l",
				"updated": "20220816194206"
			}
		},
		{
			"ID": "20220915144632-eybt8pz",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220915144632-eybt8pz",
				"updated": "20220915144659"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "10. 静态 IP 设置",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915144632-ylmosyv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c2hlbGw=",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220915144632-ylmosyv",
				"updated": "20220915144635"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw=",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\nnmcli connection modify ens33 ipv4.address  10.253.15.80/25\nnmcli con mod ens33 ipv4.gateway 10.253.15.1\nnmcli con mod ens33 ipv4.method manual\nnmcli con mod ens33 ipv4.dns \"10.253.15.8\"\nnmcli con down ens33\nnmcli con up ens33\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915200750-equrhxv",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220915200750-equrhxv",
				"updated": "20220915200806"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "11. dmesg 格式化脚本",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915200756-xo91ukh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c2hlbGw=",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220915200756-xo91ukh",
				"updated": "20220915200756"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw=",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\n#! /bin/sh\nuptime_ts=`cat /proc/uptime | awk '{ print $1}'`\ndmesg | awk -v uptime_ts=$uptime_ts 'BEGIN {\n    now_ts = systime();\n    start_ts = now_ts - uptime_ts;\n}\n{\n    print strftime(\"[%Y/%m/%d %H:%M:%S]\", start_ts + substr($1, 2, length($1) - 2)), $0\n}'\n\n\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220920163020-94vcqj0",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220920163020-94vcqj0",
				"updated": "20220920163122"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "12. 常用的清理 Kubernetes 集群资源命令",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220920163232-9vd91j8",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20220920163232-9vd91j8",
				"updated": "20220920163233"
			},
			"Children": [
				{
					"ID": "20220920163233-cnci823",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20220920163233-cnci823",
						"updated": "20220920163233"
					},
					"Children": [
						{
							"ID": "20220920163233-ve36l9i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220920163233-ve36l9i",
								"updated": "20220920163233"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Kubernetes 基础对象清理",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220920163217-87pwklj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c2hlbGw=",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220920163217-87pwklj",
				"updated": "20220920163250"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw=",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\n清理 Evicted 状态的 Pod\nsudo kubectl get pods --all-namespaces -o wide | grep Evicted | awk '{print $1,$2}' | sudo xargs -L1 kubectl delete pod -n\n\n清理 Error 状态的 Pod\nsudo kubectl get pods --all-namespaces -o wide | grep Error | awk '{print $1,$2}' | sudo xargs -L1 kubectl delete pod -n\n\n清理 Completed 状态的 Pod\nsudo kubectl get pods --all-namespaces -o wide | grep Completed | awk '{print $1,$2}' | sudo xargs -L1 kubectl delete pod -n\n\n清理没有被使用的 PV\nsudo kubectl describe -A pvc | grep -E \"^Name:.*$|^Namespace:.*$|^Used By:.*$\" | grep -B 2 \"\u003cnone\u003e\" | grep -E \"^Name:.*$|^Namespace:.*$\" | cut -f2 -d: | paste -d \" \" - - | sudo xargs -n2 bash -c 'kubectl -n ${1} delete pvc ${0}'\n\n清理没有被绑定的 PVC\nsudo kubectl get pvc --all-namespaces | tail -n +2 | grep -v Bound | awk '{print $1,$2}' | sudo xargs -L1 kubectl delete pvc -n\n\n清理没有被绑定的 PV\nsudo kubectl get pv | tail -n +2 | grep -v Bound | awk '{print $1}' | sudo xargs -L1 kubectl delete pv\n \n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220920163251-qs5ey23",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20220920163251-qs5ey23",
				"updated": "20220920163856"
			},
			"Children": [
				{
					"ID": "20220920163851-2ab867d",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20220920163851-2ab867d",
						"updated": "20220920163856"
					},
					"Children": [
						{
							"ID": "20220920163856-577pff4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220920163856-577pff4",
								"updated": "20220920163856"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Linux 清理",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220920163910-f0litrf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c2hlbGw=",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220920163910-f0litrf",
				"updated": "20220920164002"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw=",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "看磁盘全部空间\nsudo df -hl /\nFilesystem      Size  Used Avail Use% Mounted on\n/dev/sda2       100G   47G   54G  47% /\n\n查看指定目录占用\nsudo du -sh .\n24G\t.\n\n删除指定前缀的文件夹\ncd /nfsdata\nls | grep archived- |xargs -L1 rm -r\n\n清理僵尸进程\nsudo ps -A -ostat,ppid | grep -e '^[Zz]' | awk '{print }' | xargs kill -HUP \u003e /\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220920164009-wys19rg",
			"Type": "NodeList",
			"ListData": {
				"Tight": true,
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20220920164009-wys19rg",
				"updated": "20220920164010"
			},
			"Children": [
				{
					"ID": "20220920164010-rt7upuj",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"Tight": true,
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20220920164010-rt7upuj",
						"updated": "20220920164010"
					},
					"Children": [
						{
							"ID": "20220920164010-fqm51c0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220920164010-fqm51c0",
								"updated": "20220920164015"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Docker 镜像",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220920164024-l8rzblw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "c2hlbGw=",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220920164024-l8rzblw",
				"updated": "20220920164301"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c2hlbGw=",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "查看磁盘使用情况\nsudo docker system df\n\nTYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE\nImages              361                 23                  178.5GB             173.8GB (97%)\nContainers          29                  9                   6.682GB             6.212GB (92%)\nLocal Volumes       4                   0                   3.139MB             3.139MB (100%)\nBuild Cache         0                   0                   0B                  0B\n\n清理 none 镜像\nsudo docker images | grep none | awk '{print $3}' | sudo xargs docker rmi\n\n清理不再使用的数据卷\nsudo docker volume rm $(docker volume ls -q)   或者  sudo docker volume prune\n\n\n清理缓存\nsudo docker builder prune\n\n全面清理: 删除关闭的容器、无用的存储卷、无用的网络、dangling 镜像（无 tag 镜像）\ndocker system prune -f\n\n清理正则匹配上的镜像\nsudo docker images |grep -E \"([0-9a-z]*[-]){3,}[0-9]{9}\" |awk '{print $3}' | sudo \n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221222101729-8r40e4l",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221222101729-8r40e4l",
				"updated": "20221222101741"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "13. git 强制拉取覆盖本地",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221222101756-ybbwqar",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "XA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221222101756-ybbwqar",
				"updated": "20221222102025"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "# 将这些更新取回本地，这时就要用到git fetch命令。\ngit fetch --all\n\n#撤销本地、暂存区、版本库(用远程服务器的origin/master替换本地、暂存区、版本库)\ngit reset --hard origin/master\n\n#git pull来从远程仓库\"同步\"代码\ngit pull\n\n#git强制覆盖本地命令（单条执行）：\n\ngit fetch --all \u0026\u0026 git reset --hard origin/master \u0026\u0026 git pull\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20230303132440-ydan5y8",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230303132440-ydan5y8",
				"updated": "20230303134024"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "14 检查时区",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20230303134025-zj22tcg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20230303134025-zj22tcg",
				"updated": "20230303134025"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "timedatectl | grep \"Time zone\"| awk 'BEGIN{FS=\":\"}END{print $2}' |awk '{print $1}'\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20230324145051-2jhh4w8",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230324145051-2jhh4w8",
				"updated": "20230324145106"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "# ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "15. 查看是否有数据残留",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20230324145106-8zs5bcy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "XA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20230324145106-8zs5bcy",
				"updated": "20230324145133"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "XA==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\n# https://github.com/google/container-explorer  下载地址\ncontainer-explorer -m meta.db -i /home/clxu/image-root/ -n k8s.io ls containers | grep k8s_POD_xxx-prometheus-node-exporter-ksf4b_product-coc-monitor_07647473-c209-4ab2-be6e-71daeb9a80b9_0\n \n# 容器数据构造\n# pod.name，pod.namespace，pod.uid\n# redis-9520fa6a05f046df-1_tenant-220509040300900_567f7afc-2b98-41d0-81e6-df2f1d861004\ncontainer-explorer -m meta.db -i /home/clxu -n k8s.io ls containers | grep redis-9520fa6a05f046df\n \n# 针对这种错误，检查 meta.db 中是否有残留数据\nError: failed to reserve container\nname \"elasticsearch7_cse-77fb810e31744e06-0_tenant-220011050820410_6b946e88-1ef8-4227-95cd-80a5d1935c41_0\":\nname \"elasticsearch7_cse-77fb810e31744e06-0_tenant-220011050820410_6b946e88-1ef8-4227-95cd-80a5d1935c41_0\"\nis reserved for \"e7a58a72e38a7293139c27d87ee82a64b11c2835ddeae1d64784adbc79a1a8b8\"\n \n# container-explorer -m meta.db -i /home/clxu -n k8s.io ls containers | grep e7a58a72e38a7293139c27d87ee82a64b11c2835ddeae1d64784adbc79a1a8b8\n \n \n# 查询\ncontainer-explorer -m meta.db -i /home/clxu -n k8s.io ls containers | grep cse-77fb810e31744e06-0\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20230419152655-4vgwuy1",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230419152655-4vgwuy1",
				"updated": "20230419152923"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "16. 格式化输出提取每个pod的容器列表"
				}
			]
		},
		{
			"ID": "20230419152924-v8a3b1p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230419152924-v8a3b1p"
			}
		},
		{
			"ID": "20230419152854-xhy6em6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230419152854-xhy6em6",
				"updated": "20230419153156"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "16.1 列出所有命名空间下的所有容器镜像"
				}
			]
		},
		{
			"ID": "20230419153230-65zaik6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230419153230-65zaik6",
				"updated": "20230419153230"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "kubectl get pods --all-namespaces -o jsonpath=\"{.items[*].spec.containers[*].image}\" |\\\ntr -s '[[:space:]]' '\\n' |\\\nsort |\\\nuniq -c\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230616180930-nv22rgg",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230616180930-nv22rgg",
				"updated": "20230619162153"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "17.  runc和containerd排错入口"
				}
			]
		},
		{
			"ID": "20230619162153-i2c99x9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230619162153-i2c99x9",
				"updated": "20230619162204"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "查看容器相关审计日志\njournalctl -k | grep \u003ccontainer id\u003e\nrunc查看容器状态\nrunc --root=/run/containerd/runc/k8s.io list | grep \u003ccontainer id\u003e\nrunc查看容器错误日志\ncd  /run/containerd/io.containerd.runtime.v2.task/k8s.io/\u003ccontainer id\u003e\ncontainerd查看task状态\nctr -n k8s.io task list | grep \u003ccontainer id\u003e\n查看containerd task对应的shim进程\nps -ef | grep \u003cpod id\u003e\n通过容器id反查pod\nkubectl get pod -o jsonpath='{range .items[?(@.status.containerStatuses[].containerID==\"containerd://\u003ccontainer_id\u003e\")]}{.metadata.name}{end}' -A\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240110144238-5x12w93",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240110144238-5x12w93",
				"updated": "20240110144306"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "18.  crio 根据pid查看pod"
				}
			]
		},
		{
			"ID": "20240110144307-yodz1rb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240110144307-yodz1rb",
				"updated": "20240313213632"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "function pid2pod {\n  local pid=$1\n  if [ -f /proc/${pid}/cgroup ]; then\n    local cid=$(cat /proc/${pid}/cgroup | grep \":memory:\" | awk -F '/' '{print $NF}' | awk -F ':' '{print $NF}' | sed 's/^cri-containerd-//g' | sed 's/.scope$//g' | grep -v \"^crio-\")\n    if [ \"${cid}\" = \"\" ]; then\n      # Try cri-o\n      cid=$(cat /proc/${pid}/cgroup | grep -m1 \"/crio-\" | awk -F '/' '{print $NF}' | sed 's/^crio-//g' | sed 's/^conmon-//g' | sed 's/.scope$//g')\n      if [ \"${cid}\" != \"\" ]; then\n        result=$(sudo crictl inspect ${cid} 2\u003e/dev/null | jq -r '.status.labels[\"io.kubernetes.pod.namespace\"]+\" \"+.status.labels[\"io.kubernetes.pod.name\"]' 2\u003e/dev/null)\n        if [ \"${result}\" != \"\" ]; then\n          echo \"${result}\"\n        else\n          sudo crictl inspectp ${cid} 2\u003e/dev/null | jq -r '.status.labels[\"io.kubernetes.pod.namespace\"]+\" \"+.status.labels[\"io.kubernetes.pod.name\"]' 2\u003e/dev/null\n        fi\n      fi\n    else\n      result=$(ctr -n k8s.io c info ${cid} 2\u003e/dev/null | jq -r '.Labels[\"io.kubernetes.pod.namespace\"]+\" \"+.Labels[\"io.kubernetes.pod.name\"]' 2\u003e/dev/null)\n      if [ \"${result}\" != \"\" ]; then\n        echo \"${result}\"\n      else\n        ctr c ls 2\u003e/dev/null | grep ${cid} 2\u003e/dev/null | awk '{print $2}' 2\u003e/dev/null\n      fi\n    fi\n  fi\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240110144235-qgce9qw",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240110144235-qgce9qw",
				"updated": "20240116094547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "19.  podman推送双架构脚本"
				}
			]
		},
		{
			"ID": "20240116094547-zkwjxf8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240116094547-zkwjxf8",
				"updated": "20240429143136"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "IMAGETAG=image.xxx.cn/xxx/console-plugin-vpc-om:1648940400184000514-410\nPrefix=image.xxx.io/xxx-ceake/\nMVersion=v10.20\n\n\n\npodman pull --tls-verify=false ${IMAGETAG} --arch=amd64\npodman tag ${IMAGETAG} ${Prefix}${IMAGETAG##*/}-x86\n\npodman pull --tls-verify=false ${IMAGETAG} --arch=arm64\npodman tag ${IMAGETAG} ${Prefix}${IMAGETAG##*/}-arm\n\npodman push ${Prefix}${IMAGETAG##*/}-x86\npodman push ${Prefix}${IMAGETAG##*/}-arm\n\npodman manifest create --all mylist:${MVersion} ${Prefix}${IMAGETAG##*/}-x86 ${Prefix}${IMAGETAG##*/}-arm\npodman manifest inspect mylist:${MVersion}\n\npodman manifest push mylist:${MVersion} ${Prefix}${IMAGETAG##*/}\necho ${Prefix}${IMAGETAG##*/}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240429143131-36xzjjg",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240429143131-36xzjjg",
				"updated": "20240429143151"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "20. 清理日志"
				}
			]
		},
		{
			"ID": "20240429143132-5ju799r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240429143132-5ju799r",
				"updated": "20240809122656"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "df -h\nsudo du -h --max-depth=1 /var\nsudo find /var/subdirectory -type f -size +1G\nsudo find /var/log -type f -name \"*.log\" -exec rm -f {}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240809122659-gcbozlh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240809122659-gcbozlh",
				"updated": "20240809122952"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1、统计当前目录下各子目录的大小，并排序\ndu -h --max-depth=1 /bak | sort -hr\n\n[root@YLMS bak]# du -h --max-depth=1 /bak | sort -hr\n62G  /bak\n36G  /bak/定厂\n16G  /bak/吴派\n9.5G  /bak/榆化\n415M  /bak/延系统\n326M  /bak/资产系统\n33M  /bak/党建系统\n17M  /bak/数据备份\n248K  /bak/煤化\n244K  /bak/煤业\n\n2、统计当前目录下包含各子目录文件的大小，并显示前10个\nfind /bak -type f -exec du -h {} + | sort -rh | head -n 10\n\n[root@YLMS bak]# find /bak -type f -exec du -h {} + | sort -rh | head -n 10\n8.9G  /bak/采油厂/液量系统/20231023.dmp\n8.9G  /bak/采油厂/液量系统/20231022.dmp\n8.9G  /bak/采油厂/液量系统/20231020.dmp\n1.8G  /bak/调派/2023/10/mysql-vehicle_s2-20231023190501.sql.tgz\n1.8G  /bak/调派/2023/10/mysql-vehicle_s2-20231022190501.sql.tgz\n1.8G  /bak/调派/2023/10/mysql-vehicle_s2-20231021190501.sql.tgz\n1.8G  /bak/调派/2023/10/mysql-vehicle_s2-20231015190501.sql.tgz\n1.7G  /bak/调派/2023/10/mysql-vehicle_s2-20231020190501.sql.tgz\n1.7G  /bak/调派/2023/10/mysql-vehicle_s2-20231019190501.sql.tgz\nYou have new mail in /var/spool/mail/root\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240809122703-5of8zw5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240809122703-5of8zw5"
			}
		},
		{
			"ID": "20240515150110-83qaum8",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240515150110-83qaum8",
				"updated": "20240517143635"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "21. 查看监控指标"
				}
			]
		},
		{
			"ID": "20240515150123-sq1gzca",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240515150123-sq1gzca",
				"updated": "20240515150127"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "sudo curl -s --cacert /etc/kubernetes/static-pod-resources/etcd-certs/configmaps/etcd-serving-ca/ca-bundle.crt --key /etc/kubernetes/static-pod-resources/etcd-certs/secrets/etcd-all-certs/etcd-serving-$(hostname).key --cert /etc/kubernetes/static-pod-resources/etcd-certs/secrets/etcd-all-certs/etcd-serving-$(hostname).crt https://127.0.0.1:2379/metrics | egrep \"backend_commit_d|wal_fsync_d|leader_changes|quota|etcd_mvcc_db_total_size|etcd_network_peer_round_trip_time|sent_failures\"\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240515150110-qechmdv",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240515150110-qechmdv",
				"updated": "20240611111351"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "22. 查看crio堆栈"
				}
			]
		},
		{
			"ID": "20240611111351-uw173se",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240611111351-uw173se",
				"updated": "20240611111404"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "查看CRIO pprof\nsudo curl --unix-socket /var/run/crio/crio.sock http://localhost/debug/pprof/goroutine?debug=4\nsudo curl --unix-socket /var/run/crio/crio.sock http://localhost/debug/pprof/heap \u003e mem.profile\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240627160413-64j54qr",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20240627160413-64j54qr",
				"updated": "20250207144433"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "23. 一行改密码"
				}
			]
		},
		{
			"ID": "20240627160451-ayv0c8h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240627160451-ayv0c8h",
				"updated": "20240627160509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "// 用root或admin用户执行"
				}
			]
		},
		{
			"ID": "20240627160432-er49nwx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240627160432-er49nwx",
				"updated": "20240627160524"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "echo 'xxxxxx'| passwd  --stdin  USERNAME"
				}
			]
		},
		{
			"ID": "20250207141557-9rcfc3i",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20250207141557-9rcfc3i",
				"style": "line-height: 22px;",
				"updated": "20250207144433"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "for h in `kubectl get node  -owide --no-headers | awk '{print $6}' `;do echo \"开始修改${h}节点密码\";ssh -i id_rsa -o StrictHostKeyChecking=no ccadmin@$h \"echo 'user:xxx | sudo chpasswd\";echo \"节点${h}密码修改完成\";done\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20250206102524-ssq3ode",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20250206102524-ssq3ode",
				"updated": "20250207111256"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "24. 存储巡检"
				}
			]
		},
		{
			"ID": "20250206102657-ouzs2qb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250206102657-ouzs2qb",
				"updated": "20250206102700"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多路径巡检"
				}
			]
		},
		{
			"ID": "20250206102540-muz6oac",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20250206102540-muz6oac",
				"style": "line-height: 22px;",
				"updated": "20250206102654"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "for i in `sudo kubectl get nodes -o wide|grep compute|awk '{print $6}'`; do sudo ssh -i id_rsa ccadmin@$i -o \"StrictHostKeyChecking no\"  \"sudo echo $i \u0026\u0026 sudo multipath -ll|grep -C2 -i failed\"; done\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20250206102703-od3ao9b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250206102703-od3ao9b",
				"updated": "20250206102713"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "检查指定计算节点IP显示所有的ecs的路径"
				}
			]
		},
		{
			"ID": "20250206102714-jy7pb20",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20250206102714-jy7pb20",
				"style": "line-height: 22px;",
				"updated": "20250206102732"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "for i in `sudo kubectl get pod -A  -owide | grep virt-launcher-ecs-  | grep 10.100.134.32| awk '{print $1$2}'`;\ndo\n   tenant=`echo $i |  cut -d 'v' -f1`;\n   ecs=`echo ${i##*virt}` ;\n   echo \"tenant=$tenant ecs=virt$ecs\";\n   sudo kubectl exec -it -n $tenant  virt$ecs -- ls -lsh /dev/|grep ecs-    ;\n   sudo kubectl exec -it -n $tenant  virt$ecs -- ls -lsh /var/run/kubevirt/hotplug-disks/| grep pvc-volume;   \t   \ndone\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20250207111255-75n5wn2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20250207111255-75n5wn2",
				"updated": "20250207111255"
			}
		},
		{
			"ID": "20250207111255-gcr5y83",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20250207111255-gcr5y83",
				"updated": "20250207111309"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "25. 虚拟机操作"
				}
			]
		},
		{
			"ID": "20250207111304-pt39ef8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"custom-riff-decks": "20230218211946-2kw8jgx",
				"id": "20250207111304-pt39ef8",
				"style": "line-height: 22px;",
				"updated": "20250207111309"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#!/bin/bash\n# V5-虚机操作.sh 通过ecs-server接口获取信息、操作虚拟机\n\n# 显示帮助信息\nshow_help() {\n    echo \"虚机管理工具，请在cell0集群执行\"\n    echo \"用法: $0 [选项] [虚机ID] \u003c配置ID\u003e\"\n    echo \"选项:\"\n    echo \"  -q, --query              查询虚机信息\"\n    echo \"  -s, --start              启动虚机\"\n    echo \"  -t, --stop               关闭虚机\"\n    echo \"  -r, --restart            重启虚机\"\n    echo \"  -c, --cold-migrate       冷迁虚机\"\n    echo \"  -l, --live-migrate       热迁虚机\"\n    echo \"  -a, --adjust-config      调整配置\"\n    echo \"  -v, --validate-node      获取迁移可调度节点\"\n    echo \"  -h, --help               显示帮助信息\"\n}\n\nLOG_INFO(){\n\n    local green='\\033[32m'\n    local NC='\\033[0m' # No Color\n    local msg=$1\n    local now=`date  +\"%Y-%m-%d %H:%M:%S\"`\n\n    echo -e \"${now} ${green}INFO ${NC} ${msg}\"\n}\n\nLOG_ERROR(){\n\n    local green='\\033[0;31m'\n    local NC='\\033[0m' # No Color\n    local msg=$1\n    local now=`date  +\"%Y-%m-%d %H:%M:%S\"`\n\n    echo -e \"${now} ${green}ERROR${NC} ${msg}\"\n}\n\n# 定义操作函数\nstart_vm() {\n    local vm_id=$1\n    query_vm $vm_id\n    LOG_INFO \"开启虚机: $vm_id\"\n    local url=https://$ecsDomain/$ecsUri/instances/$vm_id/start\n    local temp=$$.tmp\n    curl -sk -X PUT $url \u003e $temp\n    code=$(cat $temp |jq -r .code)\n    if [ $code != \"Success\" ]; then\n        LOG_ERROR \"开机失败！\"\n        cat $temp |jq\n        rm -f $temp\n        exit 1\n    else\n        LOG_INFO \"开启虚机: $vm_id 请求下发成功\"\n    fi\n    rm -f $temp\n}\n\nrestart_vm() {\n    local vm_id=$1\n    query_vm $vm_id\n    LOG_INFO \"重启虚机: $vm_id\"\n    local url=https://$ecsDomain/$ecsUri/instances/$vm_id/restart\n    local temp=$$.tmp\n    curl -sk -X PUT $url -d '{\"gracePeriodSeconds\":0}'\u003e $temp\n    code=$(cat $temp |jq -r .code)\n    if [ $code != \"Success\" ]; then\n        LOG_ERROR \"重启虚机 $vm_id 失败！\"\n        cat $temp |jq\n        rm -f $temp\n        exit 1\n    else\n        LOG_INFO \"重启虚机: $vm_id 请求下发成功\"\n    fi\n    rm -f $temp\n}\n\nstop_vm() {\n    local vm_id=$1\n    query_vm $vm_id\n    LOG_INFO \"关闭虚机: $vm_id\"\n    local url=https://$ecsDomain/$ecsUri/instances/$vm_id/stop\n    local temp=$$.tmp\n    curl -sk -X PUT $url -d '{\"gracePeriodSeconds\":0}' \u003e $temp\n    code=$(cat $temp |jq -r .code)\n    if [ $code != \"Success\" ]; then\n        LOG_ERROR \"关机失败！\"\n        cat $temp |jq\n        rm -f $temp\n        exit 1\n    else\n        LOG_INFO \"关闭虚机: $vm_id 请求下发成功\"\n    fi\n    rm -f $temp\n}\n\nquery_vm() {\n    local vm_id=$1\n    LOG_INFO \"获取虚机 $vm_id 信息中 ...\"\n    # https://ecs-service.region-xc-0.intranet.testcloud.com/api/ecs/v1/instances/ecs-0u5blryi8r4gt7\n    local url=https://$ecsDomain/$ecsUri/instances/$vm_id\n    local temp=$$.tmp\n    curl -sk $url \u003e $temp\n    code=$(cat $temp |jq -r .code)\n    if [ $code != \"Success\" ]; then\n        LOG_ERROR \"获取虚机信息失败！\"\n        cat $temp |jq\n    else\n        displayName=$(cat $temp |jq -r .data.displayName)\n        tenantId=$(cat $temp |jq -r .data.tenantId)\n        status=$(cat $temp |jq -r .data.status)\n        LOG_INFO \"虚机基本信息：\"\n        echo \"虚机名:$displayName 虚机ID:$vm_id 所属租户:$tenantId 状态:$status\"\n        LOG_INFO \"虚机镜像信息：\"\n        imageId=$(cat $temp |jq -r .data.imageId)\n        imageUrl=$(cat $temp |jq -r .data.imageUrl)\n        imgServerUri=api/image/v1/images\n\tlocal imgServerUrl=https://$imgDomain/$imgServerUri/$imageId\n\timgTemp=imgTemp-$$.tmp\n\tcurl -sk $imgServerUrl \u003e $imgTemp\n        code=$(cat $imgTemp |jq -r .code)\n        if [ $code != \"Success\" ]; then\n            LOG_ERROR \"获取镜像信息失败！\"\n            cat $imgTemp |jq\n\telse\n\t    imageName=$(cat $imgTemp |jq -r .data.name)\n\t    imageMinSize=$(cat $imgTemp |jq -r .data.minDisk)\n\t    imageArch=$(cat $imgTemp |jq -r .data.cpuArch)\n\t    imageStatus=$(cat $imgTemp |jq -r .data.status)\n\tfi\n\trm -f $imgTemp\n        echo \"镜像名:$imageName 镜像ID:$imageId 大小:$imageMinSize 架构:$imageArch 状态:$imageStatus 镜像URL: $imageUrl\"\n        LOG_INFO \"虚机集群信息：\"\n        region=$(cat $temp |jq -r .data.region)\n        az=$(cat $temp |jq -r .data.az)\n        cell=$(cat $temp |jq -r .data.cell)\n        nodeName=$(cat $temp |jq -r .data.nodeName)\n        echo \"REGION:$region AZ:$az CELL:$cell 宿主机:$nodeName\"\n        LOG_INFO \"虚机规格信息：\"\n        flavorName=$(cat $temp |jq -r .data.flavor.name)\n        flavorId=$(cat $temp |jq -r .data.flavor.flavorId)\n        vcpu=$(cat $temp |jq -r .data.flavor.cpu)\n        ram=$(cat $temp |jq -r .data.flavor.ram)\n        echo \"规格名:$flavorName 规格ID:$flavorId 规格大小:${vcpu}C${ram}G\"\n        LOG_INFO \"虚机主网卡信息：\"\n        vpcId=$(cat $temp |jq -r .data.networkMappings[0].vpcId)\n        subnetId=$(cat $temp |jq -r .data.networkMappings[0].subnetId)\n        portId=$(cat $temp |jq -r .data.networkMappings[0].portId)\n        ipv4Address=$(cat $temp |jq -r .data.networkMappings[0].ipv4Address)\n        echo \"vpcId:$vpcId subnetId:$subnetId portId:$portId ipv4Address:$ipv4Address\"\n        LOG_INFO \"虚机系统盘信息：\"\n        volumeName=$(cat $temp |jq -r .data.blockDeviceMappings[0].name)\n        volumeId=$(cat $temp |jq -r .data.blockDeviceMappings[0].volumeId)\n        volumeUuid=$(cat $temp |jq -r .data.blockDeviceMappings[0].volumeUuid)\n        volumeType=$(cat $temp |jq -r .data.blockDeviceMappings[0].volumeType)\n        volumeSize=$(cat $temp |jq -r .data.blockDeviceMappings[0].volumeSize)\n        echo \"volumeName:$volumeName volumeId:$volumeId volumeUuid:$volumeUuid volumeType:$volumeType volumeSize:$volumeSize\"\n        volumeCount=$(cat $temp |jq -r '.data.blockDeviceMappings |length')\n        if [ $volumeCount -gt 1 ]; then\n            LOG_INFO \"虚机数据盘信息：\"\n            for n in $(seq 1 $(expr $volumeCount - 1)); do\n                echo \"数据盘$n:\"\n                diskName=$(cat $temp |jq -r .data.blockDeviceMappings[$n].name)\n                volumeName=$(cat $temp |jq -r .data.blockDeviceMappings[$n].name)\n                volumeId=$(cat $temp |jq -r .data.blockDeviceMappings[$n].volumeId)\n                volumeUuid=$(cat $temp |jq -r .data.blockDeviceMappings[$n].volumeUuid)\n                volumeType=$(cat $temp |jq -r .data.blockDeviceMappings[$n].volumeType)\n                volumeSize=$(cat $temp |jq -r .data.blockDeviceMappings[$n].volumeSize)\n                echo \"volumeName:$volumeName volumeId:$volumeId volumeUuid:$volumeUuid volumeType:$volumeType volumeSize:$volumeSize\"\n            done\n        fi\n        echo \"\"\n    fi\n    rm -f $temp\n}\n\ncold_migrate_vm() {\n    local vm_id=$1\n    query_vm $vm_id\n    #validate_node $vm_id\n    LOG_INFO \"冷迁移虚机: $vm_id\"\n    local url=https://$ecsDomain/$ecsUri/instances/$vm_id/cold-migrate\n    local temp=$$.tmp\n    dest=$2\n    curl -sk -X POST $url -d \"{\\\"nodeName\\\": \\\"$dest\\\"}\" \u003e $temp\n    code=$(cat $temp |jq -r .code)\n    if [ $code != \"Success\" ]; then\n        LOG_ERROR \"冷迁移失败！\"\n        cat $temp |jq\n        rm -f $temp\n        exit 1\n    else\n        LOG_INFO \"冷迁移虚机: $vm_id 请求下发成功\"\n    fi\n    rm -f $temp\n}\n\nlive_migrate_vm() {\n    local vm_id=$1\n    #query_vm $vm_id\n    LOG_INFO \"热迁移虚机: $vm_id\"\n    local url=https://$ecsDomain/$ecsUri/instances/$vm_id/live-migrate\n    local temp=$$.tmp\n    dest=$2\n    curl -sk -X POST $url -d \"{\\\"nodeName\\\": \\\"$dest\\\"}\" \u003e $temp\n    code=$(cat $temp |jq -r .code)\n    if [ $code != \"Success\" ]; then\n        LOG_ERROR \"热迁移失败！\"\n        cat $temp |jq\n        rm -f $temp\n        exit 1\n    else\n        LOG_INFO \"热迁移虚机: $vm_id 请求下发成功\"\n    fi\n    rm -f $temp\n}\n\nvalidate_node() {\n    local vm_id=$1\n    LOG_INFO \"获取迁移虚机 $vm_id 可调度节点：\"\n    local temp=$$.tmp\n    local url=https://$ecsDomain/$ecsUri/instances/$vm_id/schedulable-nodes\n    curl -sk $url \u003e $temp\n    code=$(cat $temp |jq -r .code)\n    if [ \"$code\" != \"Success\" ]; then\n        LOG_ERROR \"获取可调度节点失败！\"\n        cat $temp |jq\n        rm -f $temp\n        exit 1\n    else\n        LOG_INFO \"获取可调度节点请求下发成功\"\n        dests=$(cat $temp |jq .data[])\n        if [[ -z $dests ]]; then\n            LOG_ERROR \"没有可调度节点\"\n        else\n            LOG_INFO \"虚机 $vm_id 可迁移节点为：\\n$dests\"\n        fi\n    fi\n    rm -f $temp\n}\n\nadjust_config() {\n    local vm_id=$1\n    local config_id=$2\n    echo \"调整配置: 虚机ID=$vm_id, 配置ID=$config_id\"\n    # 在这里编写调整配置的具体操作\n}\n\n# 如果没有提供参数，则显示帮助信息并退出\nif [[ $# -lt 2 ]]; then\n    show_help\n    exit 1\nfi\n\n#判断命令是否存在\nprogram_exists() {\n    local ret='0'\n    command -v $1 \u003e/dev/null 2\u003e\u00261 || { local ret='1'; }\n\n    # fail on non-zero return value\n    if [ \"$ret\" -ne 0 ]; then\n        return 1\n    fi\n\n    return 0\n}\n\n# 判断当前环境使用的哪个命令\nif $(program_exists kubectl) ; then\n  ctlCMD=kubectl\nelif $(program_exists oc) ; then\n  ctlCMD=oc\nelif $(program_exists ccos) ; then\n  ctlCMD=ccos\nelse\n  echo \"没有可用的k8s命令行工具（kubectl/oc/ccos）\"\n  exit 1\nfi\n\n#ctlCMD=kubectl\n#ctlCMD=oc\n#ctlCMD=ccos\necsDomain=$($ctlCMD get route -n ccos-product-ecs ecs-service --no-headers |awk '{print $2}')\nif [ -z $ecsDomain ]; then\n    LOG_ERROR \"获取ecs route 失败，请确认命令：$ctlCMD get route -n ccos-product-ecs ecs-service 是否能正确执行\"\n    exit 1\nfi\necsUri=api/ecs/v1\n\nimgDomain=$($ctlCMD get route -n ccos-product-ecs ecs-image --no-headers |awk '{print $2}')\nif [ -z $imgDomain ]; then\n    LOG_ERROR \"获取ecs route 失败，请确认命令：$ctlCMD get route -n ccos-product-ecs ecs-image 是否能正确执行\"\n    exit 1\nfi\n\n\n# 解析命令行选项和参数\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        -q|--query)\n            query_vm $2\n            exit 0\n            ;;\n        -s|--start)\n            start_vm $2\n            exit 0\n            ;;\n        -t|--stop)\n            stop_vm $2\n            exit 0\n            ;;\n        -r|--restart)\n            restart_vm $2\n            exit 0\n            ;;\n        -c|--cold-migrate)\n            if [[ -z $3 ]]; then\n                LOG_ERROR \"错误: 冷迁移操作必须提供目标节点参数，请从以下输出中选择目标节点\"\n                validate_node $2\n                exit 1\n            fi\n            cold_migrate_vm $2 $3\n            exit 0\n            ;;\n        -l|--live-migrate)\n            # $2是ecs-id $3为目标主机，不提供则由系统调度\n            # 例：sh ecs_operation.sh -l ecs-y60ui1qnbp6ei9 whr1a1-computer7-504b09u08\n            live_migrate_vm $2 $3\n            exit 0\n            ;;\n        -a|--adjust-config)\n            if [[ -z $3 ]]; then\n                echo \"错误: 调整配置操作需要提供配置ID参数\"\n                exit 1\n            fi\n            adjust_config $2 $3\n            exit 0\n            ;;\n        -v|--validate-node)\n            validate_node $2\n            exit 0\n            ;;\n        -?|--help)\n            show_help\n            exit 0\n            ;;\n        *)\n            echo \"未知选项: $1\"\n            exit 1\n            ;;\n    esac\n    shift # 处理下一个参数\ndone\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240430141531-zv3p59d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240430141531-zv3p59d",
				"updated": "20240627160416"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "crictl rmi --prune"
				}
			]
		},
		{
			"ID": "20240430141531-z6t23vr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240430141531-z6t23vr"
			}
		},
		{
			"ID": "20230619162504-vwd23yu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230619162504-vwd23yu",
				"updated": "20230810162443"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ps -e -o stat,pid,comm,cmd,wchan,lstart  | grep ^[D]"
				}
			]
		},
		{
			"ID": "20230810162508-tb244wb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230810162508-tb244wb",
				"updated": "20230810162509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "/opt/bin/raid/storcli64 /c1 show termlog \u003e Termlog"
				}
			]
		},
		{
			"ID": "20230810162532-l8035zz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230810162532-l8035zz",
				"updated": "20230810162532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "storcli64 /c0 show alilog"
				}
			]
		},
		{
			"ID": "20230810230852-gf15czq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230810230852-gf15czq",
				"updated": "20230810235523"
			}
		},
		{
			"ID": "20230829140650-cnoqwzb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230829140650-cnoqwzb",
				"updated": "20231101095802"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ipmitool -I lanplus -U ADMIN -P ADMIN -H  X.X.X.X   chassis bootdev bios options=efiboot\nipmitool -I lanplus -U ADMIN -P ADMIN -H  X.X.X.X   chassis bootdev pxe options=efiboot"
				}
			]
		},
		{
			"ID": "20230829140650-emk4oi5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230829140650-emk4oi5"
			}
		},
		{
			"ID": "20230829140650-qdey5z5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230829140650-qdey5z5",
				"updated": "20240903155144"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "kubectl get pods -o wide -A| grep Evict| awk '{print \"kubectl delete pods -n\","
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "inline-math",
					"TextMarkInlineMathContent": "1,"
				},
				{
					"Type": "NodeText",
					"Data": "2}' | bash -x"
				}
			]
		},
		{
			"ID": "20241031151349-ubruzd7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20241031151349-ubruzd7",
				"updated": "20241031151404"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1. 删除Crash\nkubectl get pods -o wide -A| grep Crash| awk ‘{print “kubectl delete pods -n”,$1,$2}’ | bash -x\n\n2. 删除Evict\nkubectl get pods -o wide -A| grep Evict| awk ‘{print “kubectl delete pods -n”,$1,$2}’ | bash -x\n\n3. 删除NodeAffinity\nkubectl get pods -o wide -A| grep NodeAffinity| awk ‘{print “kubectl delete pods -n”,$1,$2}’ | bash -x\n \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230829141533-x7w7xeg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230829141533-x7w7xeg"
			}
		},
		{
			"ID": "20240129171656-my3mgjg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20240129171656-my3mgjg",
				"updated": "20240129171701"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\nipmitool -I lanplus -H 10.253.3.61 -U root -P 0penBmc chassis bootdev bios\nipmitool -I lanplus -H 10.253.3.61 -U root -P 0penBmc chassis bootdev pxe\nipmitool -I lanplus -H 10.253.3.61 -U root -P 0penBmc chassis bootparam get 5\nipmitool -I lanplus -H 10.253.3.61 -U root -P 0penBmc raw 0x00 0x08 0x05 0xa0 0x04 0x00 0x00 0x00\nipmitool -I lanplus -H 10.253.3.61 -U root -P 0penBmc power off\nipmitool -I lanplus -H 10.253.3.61 -U root -P 0penBmc power on\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20240515150103-jesae6b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20240515150103-jesae6b"
			}
		}
	]
}